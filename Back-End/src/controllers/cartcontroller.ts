import { Request, Response } from "express";
import Cart from "../models/cartmodel";
import jwt from "jsonwebtoken";

interface JwtPayload {
    userId: string;
}

export const addToCart = async (req: Request, res: Response): Promise<void> => {
    try {
        // üõë L·∫•y token t·ª´ Header
        const token = req.headers.authorization?.split(" ")[1];
        console.log("Authorization Header:", req.headers.authorization); // Log to ensure token is passed correctly
        if (!token) {
            res.status(401).json({ message: "Ch∆∞a ƒëƒÉng nh·∫≠p" });
            return;
        }

        // üõë Gi·∫£i m√£ token ƒë·ªÉ l·∫•y userId
        const secretKey = process.env.JWT_SECRET;
        if (!secretKey) {
            res.status(500).json({ message: "Kh√¥ng t√¨m th·∫•y secret key" });
            return;
        }

        let decoded: JwtPayload;
        try {
            decoded = jwt.verify(token, secretKey) as JwtPayload;
            console.log("Decoded Token:", decoded); // Log the decoded token for debugging
        } catch (error) {
            res.status(401).json({ message: "Token kh√¥ng h·ª£p l·ªá" });
            return;
        }
        { headers: { Authorization: `Bearer ${token}` } }


        // L·∫•y userId t·ª´ decoded token
        const userId = decoded.userId;

        // üõë Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
        const { bookId, quantity } = req.body;
        if (!bookId || !quantity) {
            res.status(400).json({ message: "Thi·∫øu d·ªØ li·ªáu" });
            return;
        }

        // üõë X·ª≠ l√Ω gi·ªè h√†ng
        let cart = await Cart.findOne({ userId });
        if (!cart) {
            cart = new Cart({ userId, items: [] });
        }
        
        const itemIndex = cart.items.findIndex((item) => item.bookId.toString() === bookId);
        if (itemIndex > -1) {
            cart.items[itemIndex].quantity += quantity; // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng n·∫øu s√°ch ƒë√£ c√≥ trong gi·ªè h√†ng
        } else {
            cart.items.push({ bookId, quantity }); // Th√™m m·ªõi n·∫øu s√°ch ch∆∞a c√≥ trong gi·ªè h√†ng
        }

        await cart.save(); // L∆∞u gi·ªè h√†ng

        res.status(200).json({ message: "Th√™m v√†o gi·ªè h√†ng th√†nh c√¥ng", cart });
    } catch (error) {
        console.error("L·ªói:", error);
        res.status(500).json({ message: "L·ªói server" });
    }
};

